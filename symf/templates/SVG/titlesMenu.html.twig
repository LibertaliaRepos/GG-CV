<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="30">
    <g class="background">
        <rect x="0" y="2" width="100%" height="25" fill="#FFF" />
        <line x1="0" y1="2" x2="100%" y2="2" stroke-width="4" stroke="#000" />
        <line x1="0" y1="26" x2="100%" y2="26" stroke-width="4" stroke="#000" />
    </g>
    {% for link in links %}

        <a class="svg-link" xlink:href="{{ '#' ~ link.href }}" data-smooth-scroll data-moved="false">

            <polygon points="{{ link.polygon }}" fill="#FFF" stroke="#000" stroke-width="1" data-width="{{ link.polygon.width }}" />
            <text x="{{ link.text.X }}" y="{{ link.text.Y }}" fill="#000" font-size="1.3rem" font-family="'Space Mono'" text-anchor="middle">{{ link.text.Text }}</text>

        </a>

    {% endfor %}
</svg>

<script>
    $('#pageMenu a').each(function () {

        $(this).mouseover(function () {
            $(this).children('polygon').attr('fill', '#000');
            $(this).children('text').attr('fill', '#FFF');
        });

        $(this).mouseleave(function () {
            $(this).children('polygon').attr('fill', '#FFF');
            $(this).children('text').attr('fill', '#000');
        });
    });
</script>
<script>

    function DEBUG(data, THROW = true) {
        console.log(data);

        if (THROW)
            throw {};
    }

    function arrayEqual(array1, array2) {
        array1.forEach(function (value, index) {

            if ((Array.isArray(value) && !arrayEqual(value, array2[index])) || (!Array.isArray(value) && value != array2[index]))
                return false;
        });

        return true;
    }

    var svgMenu = {
        parent : document.querySelector('#pageMenu svg'),
        height : document.querySelector('#pageMenu svg').getAttribute('height'),
        background : document.querySelector('#pageMenu svg g'),
        links : document.querySelectorAll('#pageMenu svg a'),
        linesCount : 1,
        lines : null,

        resizeDown : function () {
            var windowWidth = window.outerWidth;
            var countWidth = 0;

            var linesCount = 1;
            var lines = [];
            var currentLine = [];

            svgMenu.links.forEach(function (link, index) {
                countWidth += link.getBBox().width;

                if (countWidth > (windowWidth * linesCount)) {
                    linesCount++;

                    lines.push(currentLine);
                    currentLine = [];
                }

                currentLine.push(link);

                if (index == (svgMenu.links.length - 1)) {
                    lines.push(currentLine);
                }
            });



            DEBUG(lines, false);

            for (var i = 1; i < lines.length; ++i) {
                lines[i].forEach(function (link) {
                    if (link.dataset.moved == 'false') {
                        svgMenu.parent.removeChild(link);
                    }
                });

                if (i > svgMenu.linesCount || svgMenu.linesCount == 1)
                    svgMenu.parent.appendChild(svgMenu.requestGroup(i));
            }


            DEBUG(lines, false);

            svgMenu.linesCount = linesCount;
            svgMenu.setHeight(lines.length);

            // if (svgMenu.lines !== null && arrayEqual(svgMenu.lines, lines))
            //     return;
            //
            // svgMenu.lines = lines;

            for (var i = 1; i < lines.length; ++i) {
                lines[i].forEach(function (link, link_index) {
                    if (link.dataset.moved != 'true') {

                        var polyPoints = link.querySelector('polygon').getAttribute('points').split(' ');
                        var pointsAttr = '';
                        var offsetY = null;
                        var width = null;

                        polyPoints.forEach(function (point, p_index) {

                            if (point) {
                                var split = point.split(',');
                                split[1] = parseInt(split.pop()) + parseInt(svgMenu.height);

                                if (offsetY == null) {
                                    offsetY = -4 + parseInt(split[0]);

                                    if (link_index > 0)
                                        width = parseInt(lines[i][link_index - 1].querySelector('polygon').dataset.width) - 4;
                                }

                                if (link_index == 0 && (p_index == 0 || p_index == 3)) {
                                    split[0] = -4;
                                } else {
                                    split[0] -= offsetY;
                                    split[0] += width;
                                }


                                pointsAttr += split.join(',') + ' ';
                            }

                        });

                        link.querySelector('polygon').setAttribute('points', pointsAttr);

                        var txt = link.querySelector('text');
                        txt.setAttribute('y', parseInt(txt.getAttribute('y')) + (i * svgMenu.height));
                        txt.setAttribute('x', parseInt(txt.getAttribute('x')) - offsetY + width);

                        svgMenu.parent.appendChild(link);
                        link.dataset.moved = true;
                    }
                });
            }

        },

        resizeUp : function () {
            console.log('Up');
        },

        requestGroup : function (lineCount) {
            var svg = svgMenu.background.cloneNode(true);

            var rectElem = svg.querySelector('rect');
            rectElem.setAttribute('y', parseInt(rectElem.getAttribute('y')) + (lineCount * svgMenu.height));

            svg.querySelectorAll('line').forEach(function (line) {
                var y = parseInt(line.getAttribute('y1')) + (lineCount * svgMenu.height);
               line.setAttribute('y1', y);
               line.setAttribute('y2', y);
            });

            return svg;
        },

        setHeight : function (lineCount) {
            document.querySelector('#pageMenu svg').setAttribute('height', this.height * lineCount);
        }
    };

    //svgMenu.recalculate();
</script>

<script>
    var size = {
        before : window.outerWidth,
        now : null
    };



    window.addEventListener('resize', function () {
        size.now = window.outerWidth;

        if (size.now > size.before)
            svgMenu.resizeUp();
        else
            svgMenu.resizeDown();

        size.before = window.outerWidth;
    }, false);
</script>