{% if canvas %}
    {% set baseTpl = 'baseCanvas.html.twig' %}
{% else %}
    {% set baseTpl = 'base.html.twig' %}
{% endif %}

{% extends baseTpl  %}

{% block title %} Contact {{ parent() }} {% endblock %}
{% block stylesheets %}
  {{ parent() }}  
  {{ include('_froala/stylesheets.html.twig') }}
{% endblock %}



{% block contentBody %}
  <article id="content">
    <div id="contact">
      <h1>Contact</h1>
      
      <form id="contactForm"  method="post" action="{{ path('contact_new') }}">
<!--    Coordonnées     -->
        <fieldset id="details" class="fieldset">
          <legend>Formulaire de contact</legend>
          <label id="emailLab" class="">
            Votre adresse de messagerie 
            <span class="help-text">(obligatoire)</span>: 
            <input type="text" placeholder="Your@email.com" name="EMAIL" required />
          </label>
          <label id="nameLab">
            Nom 
            <span class="help-text">(facultatif)</span>: 
            <input type="text" name="AUTHOR" />
          </label>
          <label id="phoneLab">
            Téléphone 
            <span class="help-text">(facultatif)</span>: 
            <input type="text" name="PHONE" />
          </label>
          <label id="societyLab">
            Sociétée 
            <span class="help-text">(facultatif)</span>: 
            <input type="text" name="SOCIETY" />
          </label>

          <label id="subjectLab">
            Sujet
            <span class="help-text">(obligatoire)</span>:
            <input type="text" name="SUBJECT" required minLength="10" maxLength="250" />
            <span class="help-text">Doit contenir entre 10 et 250 caractères</span>
          </label>

          <label id="msgLab" for="contactMSG" aria-describedby="">Message
            <span class="help-text">(obligatoire)</span>

          </label>
          <textarea id="contactMSG" name="MESSAGE"></textarea>
          <section id="attachmentPdfSection" class="myAccordion" style="display:none;" data-attchment="{{ attachmentFolder }}">
						<h3 class="myAccordion-header" data-opened="true" title="Réduire"><span>Pièce jointes</span></h3>
						<ul class="myAccordion-content"></ul>
					</section>
        </fieldset>
<!--      reset / submit      -->
        <div class="button-group">
          <input class="button alert" type="reset" value="Abandon" />
          <input class="button success" type="submit" value="Envoyer" />
        </div>
      </form>
      <section id="mailSent" aria-hidden="true" aria-live="polite"></section>
    </div>
  </article>
{% endblock %}

{% block javascripts %}
  {{ parent() }}  
  {{ include('_froala/javascript.html.twig') }}
    
    <script>
    	
    	// Define popup template
    	$.extend($.FroalaEditor.POPUP_TEMPLATES, {
    		"customPlugin.popup": '[_BUTTONS_][_CUSTOM_LAYER_]'
    	});

    	// Define popup buttons.
    	$.extend($.FroalaEditor.DEFAULTS, {
    		popupButtons: ['popupClose']
    	});

    	// The custom popup is defined inside a plugin (new or existing).
    	$.FroalaEditor.PLUGINS.customPlugin = function(editor) {
    		
    		//Create custom popup
    		function initPopup() {
    			var popup_buttons = '';

    			// Create the button list
    			if (editor.opts.popupButtons.length > 0) {
    				popup_buttons += '<div class="fr-buttons">';
    				popup_buttons += editor.button.buildList(editor.opts.popupButtons);
    				popup_buttons += '</div>';
    			}

    			var cunstomLayer = '<div class="fr-image-upload-layer fr-active fr-layer" id="myAttachment-upload"><p><input id="dropDownPdfInput" type="file" accept="{{ fileMime|join(' ') }}" />or <br /><strong>drop pdf file</strong></p></div>';

    			// Load popup template
    			var template = {
    				buttons: popup_buttons,
    				custom_layer: cunstomLayer
    			};

    			// Cfreate popup
    			var $popup = editor.popups.create('customPlugin.popup', template);

    			return $popup;
    		}

    		// Show the popup
    		function showPopup() {
    			// Get the popup object defined above.
    			var $popup = editor.popups.get('customPlugin.popup');

    			// If popup doesn't exist then create it.
    			if (!$popup) $popup = initPopup();

    			// Set the editor toolbar as the popup's container
    			editor.popups.setContainer('customPlugin.popup', editor.$tb);

    			// This custom popup is opened by pressing a button from the editor's toolbar.
      		// Get the button's object in order to place the popup relative to it.
      		var $btn = editor.$tb.find('.fr-command[data-cmd="attachmentBTN"]');

      		// Set the popup's position
      		var left = $btn.offset().left + $btn.outerWidth() / 2;
      		var top = $btn.offset().top + (editor.opts.toolbarBottom ? 10 : $btn.outerHeight() - 10);

          {% if IE %}

          left = 0;
          top = 0;
          $popup.find('.fr-arrow').css('display', 'none');

          {% endif %}
      		// Show the custom popup
      		// The button's outerHeight is required in case the popup needs to be displayed above it.
      		editor.popups.show('customPlugin.popup', left, top, $btn.outerHeight());
    		}

    		// Hide the custom popup.
    		function hidePopup() {
    			editor.popups.hide('customPlugin.popup');
    		}

    		// Methods visible outside the plugin.
    		return {
    			showPopup: showPopup,
    			hidePopup: hidePopup
    		}
    	}




    	// Define Icon templates
    	$.FroalaEditor.DefineIconTemplate('image', '<img src="[SRC]" alt="" />');
    	$.FroalaEditor.DefineIconTemplate('charCounter', '<span id="myCharCounter" style="text-align:center;">[COUNT]</span>');
      


    	//Define the popup close button icon and command.
    	$.FroalaEditor.DefineIcon('popupCloseIcon', {
    		SRC: '{{ absolute_url(asset('img/_design/exit.png')) }}',
      	template: 'image'
    	});
    	$.FroalaEditor.RegisterCommand('popupClose', {
    		title: 'Close popup',
    		icon: 'popupCloseIcon',
    		undo: false,
    		focus: false,
    		callback: function() {
    			this.customPlugin.hidePopup();
    		}
    	});











    	// Define Icon contents using templates
      $.FroalaEditor.DefineIcon(
      	'attachmentIcon', 
      	{
	      	SRC: '{{ absolute_url(asset('img/_design/clipboard.png')) }}',
	      	template: 'image'
	      }
      );
      $.FroalaEditor.DefineIcon(
      	'charCounterIcon',
      	{
      		COUNT: 0,
      		template: 'charCounter'
      	}
      );

      // Edit custom buttons
      $.FroalaEditor.RegisterCommand('attachmentBTN', {
      		title: 'Joindre un fichier',
      		icon: 'attachmentIcon',
      		focus: false,
      		undo: false,
      		refreshAfterCallback: false,
      		plugin: 'customPlugin',
	    		callback: function() {
	    			this.customPlugin.showPopup();
	    		}
      	}
    	);
    	$.FroalaEditor.RegisterCommand('charCounterBTN', {
	    		title: 'Compteur de caractères',
	    		icon: 'charCounterIcon',
	    		focus: false,
	    		undo: false,
	    		refreshAfterCallback: false
	    	}
  		);






      $(function() { 
        $('#contactMSG').froalaEditor(
          {
            key: '{{ froala_key_gt_v28 }}',
            enter: $.FroalaEditor.ENTER_P, 
            placeholderText: null,
            charCounterCount: false, 
            toolbarButtons: [
              'bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', '|', 'paragraphStyle', '|', 'paragraphFormat', 'align', 'formatOL', 'formatUL', 'outdent', 'indent', 'quote', '-', 'insertLink', 'insertImage', 'embedly', 'insertTable', 'attachmentBTN', '|', 'insertHR', 'selectAll', 'clearFormatting', '|', 'undo', 'redo', '|', 'charCounterBTN'
            ],
            toolbarButtonsMD: [
              'bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', '|', 'paragraphFormat', 'align', 'formatOL', 'formatUL', 'outdent', 'indent', 'quote', '-', 'insertLink', 'insertImage', 'embedly', 'insertTable', 'attachmentBTN', '|', 'insertHR', 'selectAll', 'clearFormatting', '|', 'undo', 'redo', '|', 'charCounterBTN'
            ],
            toolbarButtonsSM: [
              'bold', 'italic', 'underline', 'strikeThrough', '|', 'paragraphFormat', 'align', 'formatOL', 'formatUL', '-', 'insertLink', 'insertImage', 'insertTable', 'attachmentBTN', '|', 'insertHR', '|', 'charCounterBTN'
            ],
            toolbarButtonsXS:  [
              'bold', 'italic', 'underline', '|', 'paragraphFormat', 'align', 'formatOL', 'formatUL', '-', 'insertLink', 'insertImage', 'insertTable', 'attachmentBTN', '|', 'insertHR', '|', 'charCounterBTN'
            ],
            pluginsEnabled: [
            'align', 'draggable', 'embedly', 'entities', 'fontAwesome', 'image', 'imageTUI', 'imageManager', 'lineBreaker', 'link', 'lists', 'paragraphStyle', 'quickInsert', 'quote', 'save', 'table', 'url', 'wordPaste', 'customPlugin'
            ],
            height: 200,
            imageUploadURL: '/contact/upload/file',
            imageUploadMethod: 'POST',
            imageAllowedTypes: ['jpeg', 'jpg', 'png', 'gif'],
            fileAllowedTypes: ['application/pdf'],
            fileUploadURL: '/contact/upload/file',
            toolbarInline: ($(window).width() <= 768),
            toolbarVisibleWithoutSelection: ($(window).width() <= 768)
          }
        )
      });


      var myAttachment = $('#myAttachment-upload');
  		myAttachment.hover(function() { $(this).css('cursor', 'pointer'); });

  		

  		$(document).on('dragenter', '#myAttachment-upload', function() {
  			$(this).css('background-color', '#ebebeb');


  			return false;
  		});

  		$(document).on('dragover', '#myAttachment-upload', function(e) {
  			e.preventDefault();
  			e.stopPropagation();
  			
  			$(this).css('background-color', '#ebebeb');

  			return false;
  		});

  		$(document).on('dragleave', '#myAttachment-upload', function(e) {
  			e.preventDefault();
  			e.stopPropagation();
  			
  			$(this).css('background-color', '');

  			return false;
  		});

  		$(document).on('drop', '#myAttachment-upload', sendPdf);

      function BadMimeTypeException(message, element) {
        this.message = message;
        this.name = 'BadMimeTypeException';
        this.element = element;
        this.toString = function() {
          if (!$('#UploadBadMime').length) {
            $(this.element).append('<p id="UploadBadMime" class="help-text">'+ this.message +'</p>');
            $(this.element).css('border', '3px dashed red');
            $('#UploadBadMime').css('color', 'red');
        }
          return this.name + ' : ' + this.message;
        };
      }

  		function sendPdf(e) {
  			e.preventDefault();
  			e.stopPropagation();

        var error = $('#UploadBadMime');
        if (error.length) {
          $(error).remove();
          $('#myAttachment-upload').css('border','');
        }

  			var dt;
  			var files;

  			if ($(e.currentTarget).attr('id') == 'myAttachment-upload') {
  				dt = e.originalEvent.dataTransfer;
  				files = dt.files;
  			} else if ($(e.currentTarget).attr('id') == 'dropDownPdfInput') {
  				dt = true;
  				files = e.currentTarget.files;
  			}
  			

        var regex = new RegExp('{{ fileMime|join('|') }}');
        for (var i = 0; i < files.length; ++i) {

          if(!files[i].type.match(regex)) {
            throw new BadMimeTypeException('Les mimes types autorisés sont : {{ fileMime|join(', ') }}', $('#myAttachment-upload'));
          }
        }

  			var attachmentFolder = $('#attachmentPdfSection').attr('data-attchment');

  			$('#attachmentPdfSection').css('display', 'block');
   

  			if (dt) {
  				if(files.length) {
  					for (var i = 0; i < files.length; ++i) {

  						var fd = new FormData();
  						fd.append('file', files[i]);
  						fd.append('attachmentFolder', attachmentFolder);
  						fd.append('fileSize', files[i].size);

  						upload(fd);
  					}
  				}
  			} else {
  				$(this).css('border', '3px solid #BBBBBB');
  			}

  			return false;
  		}

  		function upload(formData) {
  			$.ajax({
  				url: '{{ path('contact_init_attachment') }}',
  				type: 'POST',
  				data: formData,
  				contentType: false,
  				processData: false,
  				success: function(response) {
  					var link = $(response).find('a');
  					$('#attachmentPdfSection ul').append(response);
  					delAttachment('#' + link.attr('id'));

            
            $('#attachmentUploading svg').find('line[data-status=loaded]').parent().remove();

            if(!$('#attachmentUploading svg').length) {
              $('#attachmentUploading').remove();
            }


  				},
          error: function(jqXHR) {
            throw new BadMimeTypeException(jqXHR.responseJSON.message, $('#myAttachment-upload'));
          },
          xhr: function() {
            var xhr = new window.XMLHttpRequest();
            var progressBar = $('.progressBar:last');
            var total = $(progressBar).parent().attr('width');

            function showProgress(e) {
              if(e.lengthComputable) {
                var percent = e.loaded / e.total;

                $(progressBar).attr('x2', total * percent);

                if (percent > 0.8) {
                  $(progressBar).attr('data-status', 'loaded');
                }
              }
            }

            xhr.upload.addEventListener('progress', showProgress, false);

            xhr.addEventListener('progress', showProgress, false);

            return xhr;
          },
          beforeSend: function(jqXHR) {

            var width = $('#myAttachment-upload p:first').outerWidth();

            var container = '<p id="attachmentUploading">uploading ...</p>';

            var svg = '<svg width="'+ width +'" height="10" version="1.1" xmlns="http://www.w3.org/2000/svg"><line class="progressBar" x1="0" y1="5" x2="0" y2="5" stroke="#3F73FF" fill="transparent" stroke-width="5" /></svg>';

            if (!$('#attachmentUploading').length) {
              $('#myAttachment-upload').append(container);
            }

            $('#attachmentUploading').append(svg);
          }
  			});
  		}

  		function delAttachment(ident) {
  			$(ident).click(function(e) {
  				e.preventDefault();

  				var fd = new FormData();
  				fd.append('id', ident);
  				fd.append('ext', $(this).data('ext'));
  				fd.append('folderAttachment', $(this).data('attachment'));

  				$.ajax({
  					url: '{{ path('contact_tmp_del') }}',
  					type: 'POST',
  					data: fd,
  					contentType: false,
  					processData: false,
  					success: function(response) {
  						$('#attachmentPdfSection li[data-attachment='+ response.id +']').remove();
  					}
  				});
  			});
  		}

  		function contactLeaving() {
  			$.ajax({
  				url: '{{ path('contact_clear_tmp') }}',
  				type: 'POST',
  				async: false,
  				contentType: false,
  				processData: false
  			});
  		}


      var accordion = new MyAccordion($('#attachmentPdfSection'));
      accordion.init();

  		$(document).on('change', '#dropDownPdfInput', sendPdf);
  		$(window).on('beforeunload', contactLeaving);
      $('input[type=reset]').click(contactLeaving);
    </script>
    <script src="{{ asset("stylesheets/js/contact-validation.js") }}"></script>
{% endblock %}